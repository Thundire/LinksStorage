@typeparam TItem

<div class="autocomplete" @onfocusin="ShowItems" @onfocusout="HideItems">
	<MudStack Row="true">
		<MudTextField T="string" @bind-value="filter" @bind-value:event="oninput" autocomplete="off" aria-autocomplete="none" class="form-control filter" />
		@if (Items is not null && IsShowItems)
		{
			<MudButton Size="Size.Small" type="button" class="outline hide-btn" @onclick="HideItems">Hide</MudButton>
		}
	</MudStack>

	<MudPopover Open="Items is not null && IsShowItems" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter" RelativeWidth>
		<MudButton @onclick="Create">Create</MudButton>
			<MudList Clickable Dense Style="height: 300px; overflow: auto;">
				@if (FilteredItems is { Count: > 0 })
				{
					@foreach (TItem item in FilteredItems)
					{
						<MudListItem OnClick="() => Select(item)">
							@DisplayTextSelector(item)
						</MudListItem>
					}
				}
			</MudList>
	</MudPopover>
</div>

@code {
	[Parameter]
	public Func<TItem, string, bool> Filter { get; set; }
	[Parameter]
	public Func<TItem, string> DisplayTextSelector { get; set; }
	[Parameter]
	public EventCallback<TItem> OnSelected { get; set; }
	[Parameter]
	public EventCallback<string> OnCreateCalled { get; set; }
	[Parameter]
	public List<TItem>? Items { get; set; }
	string filter = string.Empty;
	List<TItem>? FilteredItems => Items.Where(x => Filter(x, filter)).ToList();
	private bool IsShowItems { get; set; }
	private bool IsClosing { get; set; }

	private async Task Select(TItem item)
	{
		if (OnSelected.HasDelegate)
		{
			await OnSelected.InvokeAsync(item);
		}
		IsClosing = false;
	}

	private void ShowItems()
	{
		IsShowItems = true;
	}

	private async Task HideItems()
	{
		IsClosing = true;
		await Task.Delay(100);
		if (IsClosing) IsShowItems = false;
	}

	private void Hide()
	{
		IsShowItems = false;
	}

	private async Task Create()
	{
		if (OnCreateCalled.HasDelegate)
		{
			await OnCreateCalled.InvokeAsync(filter);
		}
	}

}