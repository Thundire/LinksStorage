@page "/"
@inject ILogger Logger
@inject LinksRepository LinksRepository
@inject TagsRepository TagsRepository
@inject NavigationManager Nav
@inject IJSRuntime JSRuntime

<PageTitle>Home page</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Class="mt-2 pa-4">
<MudGrid Justify="Justify.Center">
	<MudItem xs="12" sm="7">
		<MudGrid>
			<MudItem xs="12">
				<MudPaper Elevation="2" Class="pa-4">
					<MudGrid>
						<MudItem xs="8">
							<MudChipSet AllClosable="true" OnClose="RemoveFromFilter">
								@foreach (var tag in FilterTags)
								{
									<MudChip Value="tag">@tag.Name</MudChip>
								}
							</MudChipSet>
						</MudItem>
						<MudItem xs="4">
							<SearchBox TItem="Tag" Items="FilterTagsDelta"
							           DisplayTextSelector="t => t.Name"
							           Filter="(t, s) => t.Name.Contains(s.ToLower(), StringComparison.OrdinalIgnoreCase)"
							           OnSelected="OnSelectFilter" OnCreateCalled="CreateTagFilter" />
						</MudItem>
					</MudGrid>
				</MudPaper>
			</MudItem>

			<MudItem xs="12">
				<MudDataGrid T="Link" MultiSelection="false" Items="@_tableLinks" SortMode="SortMode.Multiple" Filterable="true" Hideable="true"
				             QuickFilter="@_quickFilter"
				             RowClick="@SelectLink"
				             Elevation="2" Class="pa-4" Virtualize FixedHeader Height="58rem">
					<ToolBarContent>
						<MudText Typo="Typo.h6">Links</MudText>
						<MudSpacer />
						<MudTextField @bind-Value="FilterText" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
						              AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
					</ToolBarContent>
					<Columns>
						@* <SelectColumn T="Link" /> *@
						<PropertyColumn Property="x => x.Name" Title="Name" StickyLeft="true" CellStyle="width: 45%" Filterable="false" Sortable="false" />
						<TemplateColumn Title="Tags" Filterable="false" Sortable="false">
							<CellTemplate>

								<MudChipSet>
									@foreach (var tag in @context.Item.Tags)
									{
										<MudChip OnClick="() => OnSelectFilter(tag)">@tag.Name</MudChip>
									}
								</MudChipSet>
							</CellTemplate>
						</TemplateColumn>
						<TemplateColumn Filterable="false" Sortable="false" StickyRight="true" CellStyle="width: 5%">
							<CellTemplate>
								<MudStack Row="true">
									<MudButton Size="@Size.Small" Variant="Variant.Outlined" OnClick="() => Navigate(context.Item)">Open</MudButton>
									<MudButton Size="@Size.Small" Color="Color.Error" Variant="Variant.Outlined" OnClick="() => Destroy(context.Item)">Delete</MudButton>
								</MudStack>
							</CellTemplate>
						</TemplateColumn>
					</Columns>
					@* <PagerContent>
						<MudDataGridPager T="Link" />
					</PagerContent> *@
				</MudDataGrid>
			</MudItem>
		</MudGrid>
	</MudItem>

	<MudItem xs="12" sm="3">
		<MudPaper Class="pa-4">
			<MudForm Model="CurrentLink" OnSubmit="CreateOrUpdateLink">
				<MudTextField T="string" Label="Name" @bind-Value="CurrentLink.Name" />
				<MudTextField T="string" Label="Url" @bind-Value="CurrentLink.Uri" />
				<MudButtonGroup Class="mt-4 mb-2" OverrideStyles="false">
					<MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="CreateOrUpdateLink">@(IsCreating ? "Add" : "Update")</MudButton>
					<MudButton Color="Color.Info" Variant="Variant.Filled" OnClick="Clear">Clear</MudButton>
					<MudButton Color="Color.Secondary" Variant="Variant.Filled" OnClick="() => Destroy()">Delete</MudButton>
				</MudButtonGroup>
			</MudForm>

			<MudGrid>
				<MudItem xs="8">
					<MudChipSet AllClosable="true" OnClose="Remove">
						@foreach (var tag in CurrentLink.Tags)
						{
							<MudChip Value="tag">@tag.Name</MudChip>
						}
					</MudChipSet>
				</MudItem>
				<MudItem xs="4">
					<SearchBox TItem="Tag" Items="EditFormTagsDelta"
					           DisplayTextSelector="t => t.Name"
					           Filter="(t, s) => t.Name.Contains(s.ToLower(), StringComparison.OrdinalIgnoreCase)"
					           OnSelected="OnSelect" OnCreateCalled="CreateTag" />
				</MudItem>
			</MudGrid>
		</MudPaper>
	</MudItem>
</MudGrid>
</MudContainer>


@code {
	[CascadingParameter]
	public MainLayout? Layout { get; set; }

	public User? User => Layout?.User;

	private List<Link> _tableLinks = new();
	private string FilterText { get; set; } = string.Empty;
	private List<Tag> FilterTags { get; } = new();
	private Link CurrentLink { get; set; } = new();
	private bool IsCreating => CurrentLink.Id == 0;
	private List<Tag> Tags { get; set; } = new();
	private List<Tag> EditFormTagsDelta => Tags.Except(CurrentLink.Tags).ToList();
	private List<Tag> FilterTagsDelta => Tags.Except(FilterTags).ToList();
	private bool DrawerOpen { get; set; }

	protected override async Task OnInitializedAsync()
	{
		Logger.Information($"Initialized at {DateTime.Now}");
		_tableLinks = (await LinksRepository.Query()).OrderByDescending(x => x.CreatedAt).ToList();
		Tags = await TagsRepository.Query();
	}

	private Func<Link, bool> _quickFilter => x =>
	{
		var lowerFilterText = FilterText.ToLower();
		if ((string.IsNullOrEmpty(FilterText) || x.Name.ToLower().Contains(lowerFilterText) || x.Uri.Contains(lowerFilterText))
			&& (FilterTags.Count == 0 || x.Tags.Select(t => t.Id).Except(FilterTags.Select(t => t.Id)).ToArray().Length == x.Tags.Count - FilterTags.Count))
			return true;

		return false;
	};

	private async Task CreateOrUpdateLink()
	{
		Link linkOnEdit = CurrentLink;
		if (IsCreating)
		{
			linkOnEdit.CreatedAt = DateTime.UtcNow;
			linkOnEdit.UserId = User.Id;
		}
		else
		{
			linkOnEdit.UpdatedAt = DateTime.UtcNow;
		}
		Link stored = await LinksRepository.StoreOrUpdate(linkOnEdit);

		if (IsCreating) _tableLinks.Insert(0, stored);
		else stored.Copy(_tableLinks.First(x => x.Id == stored.Id));

		CurrentLink = new();
	}

	private void SelectLink(DataGridRowClickEventArgs<Link> args)
	{
		OpenDrawer(DrawerVariant.LinkAddOrEdit);
		args.Item.Copy(CurrentLink);
	}

	private void Clear()
	{
		CurrentLink = new();
	}

	private async Task Destroy(Link? link = default)
	{
		Link? linkToDestroy = default;
		if (link is not null) linkToDestroy = link;
		if (CurrentLink.Id != 0) linkToDestroy = CurrentLink;

		if (linkToDestroy is null) return;

		await LinksRepository.Destroy(linkToDestroy);
		_tableLinks.Remove(linkToDestroy);

		if (linkToDestroy == CurrentLink) CurrentLink = new();
	}

	private void OnSelect(Tag selected)
	{
		if (CurrentLink.Tags.Any(x => string.Equals(x.Name, selected.Name, StringComparison.InvariantCultureIgnoreCase))) return;
		CurrentLink.Tags.Add(selected);
	}

	private async Task CreateTag(string name)
	{
		(bool success, Tag? created) = await StoreTag(name);
		if (!success) return;
		CurrentLink.Tags.Add(created!);
	}

	private void Remove(MudChip chip)
	{
		CurrentLink.Tags.Remove((Tag)chip.Value);
	}

	private async Task Navigate(Link link)
	{
		if (link.Uri is not { Length: > 0 }) return;
		await JSRuntime.InvokeVoidAsync("open", link.Uri, "_blank");
	}

	private void RemoveFromFilter(MudChip chip)
	{
		FilterTags.Remove((Tag)chip.Value);
	}

	private void OnSelectFilter(Tag selected)
	{
		if (FilterTags.Any(x => string.Equals(x.Name, selected.Name, StringComparison.InvariantCultureIgnoreCase))) return;
		FilterTags.Add(selected);
	}

	private async Task CreateTagFilter(string name)
	{
		(bool success, Tag? created) = await StoreTag(name);
		if (!success) return;
		FilterTags.Add(created!);
	}

	private async ValueTask<(bool, Tag?)> StoreTag(string name)
	{
		if (name is not { Length: > 0 }) return (false, null);
		if (Tags.Any(x => string.Equals(x.Name, name, StringComparison.InvariantCultureIgnoreCase))) return (false, null);
		var created = await TagsRepository.Store(new()
			{
				CreatedAt = DateTime.UtcNow,
				Name = name
			});
		Tags.Add(created);
		return (true, created);
	}

	private enum DrawerVariant
	{
		LinkAddOrEdit
	}

	private void OpenDrawer(DrawerVariant variant)
	{
		DrawerOpen = true;
	}

}